using System;
using System.Threading;
using System.Threading.Tasks;

namespace CCConsoleApp
{
    class Program
    {
        static void Main(string[] args)
        {
            // Pozivanje asinhronih metoda bez Task.Run() metode
            Task.Run(async () =>
            {
                Console.WriteLine("CALLING ASYNC METHODS WITHOUT Task.Run()");

                Console.WriteLine("-----------------------------------------");

                // *** 1. Nacin pozivanja ***
                // *** await sa povratnom vrednoscu ***
                // - Poziva Metodu asinhrono
                // - Moramo da cekamo na njeno izvrsavanje pre prelaska na narednu liniju
                // - Preuzimamo rezultat cim se Metoda zavrsi

                string res1 = await Metoda();

                Console.WriteLine("Called Metoda a while ago, and it is already done");

                Console.WriteLine($"Got {res1} from Metoda");

                Console.WriteLine("-----------------------------------------");

                // *** 2. Nacin pozivanja ***
                // *** Vracanje string Task-a ***
                // - Poziva Metodu asinhrono
                // - Mozemo da radimo nesto dok cekamo na razultat
                // - Mozemo da preuzmemo rezultat gde god hocemo

                Task<string> t = Metoda();

                Console.WriteLine("Called Metoda and we're working while waiting for result");

                string res2 = await t; 

                Console.WriteLine($"Got {res2} from Metoda");

                Console.WriteLine("-----------------------------------------");

                // *** 3. Nacin pozivanja ***
                // *** Vracanje obicnog Task-a ***
                // - Poziva Metodu asinhrono
                // - Mozemo da sacekamo kraj izvrsavanja
                // - Ne mozemo da preuzmemo rezultat

                Task tNoRetVal = Metoda();

                Console.WriteLine("Called Metoda, and will wait for it, but can't retrieve result");

                await tNoRetVal;

                Console.WriteLine($"Metoda is done, but we got no result");

                Console.WriteLine("-----------------------------------------");

                // *** 4. Nacin pozivanja ***
                // *** await bez povratne vrednosti ***
                // - Poziva Metodu asinhrono
                // - Moramo da cekamo na njeno izvrsavanje pre prelaska na narednu liniju
                // - Ne mozemo da preuzmemo rezultat

                await Metoda();

                Console.WriteLine("Called Metoda a while ago, and it is already done");

                Console.WriteLine("-----------------------------------------");

                // *** 5. Nacin pozivanja ***
                // *** Bez povratne vrednosti i Task-a ***
                // - Poziva Metodu asinhrono
                // - Ne mozemo da sacekamo kraj izvrsavanja
                // - Ne mozemo da preuzmemo rezultat

                Metoda();

                Console.WriteLine("Called Metoda, but can't do anything about it");

                Console.WriteLine("Waiting for 5s to be sure it is done");

                Thread.Sleep(5000);

                Console.WriteLine("Done waiting");

                Console.WriteLine("-----------------------------------------");
            }).Wait();

            // Pozivanje asinhronih metoda preko Task.Run() metode uz await Metode unutar lambde
            // Rezultati su isti kao i u prethodnom delu, samo sto imamo dodatnu nit
            // Komanda await Metoda unutar lambde formira string vrednost 
            // S obzirom da je to jedina komanda unutar lambde i da se ne koriste {} to je i povratna vrednost lambde
            // Ova string vrednost se smesta u Task<string> (sto je povratna vrednost Task.Run() metode)
            Task.Run(async () =>
            {
                Console.WriteLine("CALLING ASYNC METHODS WITH Task.Run() AND AWAIT");

                Console.WriteLine("-----------------------------------------");

                // *** 1. Nacin pozivanja ***
                // *** await sa povratnom vrednoscu ***
                // - Poziva Metodu asinhrono unutar zasebne niti ThreadPool-a
                // - Moramo da cekamo na njeno izvrsavanje pre prelaska na narednu liniju
                // - Preuzimamo rezultat cim se Metoda zavrsi

                string res1 = await Task.Run(async () => await Metoda());

                Console.WriteLine("Called Metoda a while ago, and it is already done");

                Console.WriteLine($"Got {res1} from Metoda");

                Console.WriteLine("-----------------------------------------");

                // *** 2. Nacin pozivanja ***
                // *** Vracanje string Task-a ***
                // - Poziva Metodu asinhrono unutar zasebne niti ThreadPool-a
                // - Mozemo da radimo nesto dok cekamo na razultat
                // - Mozemo da preuzmemo rezultat gde god hocemo

                Task<string> t = Task.Run(async () => await Metoda());

                Console.WriteLine("Called Metoda and we're working while waiting for result");

                string res2 = await t;

                Console.WriteLine($"Got {res2} from Metoda");

                Console.WriteLine("-----------------------------------------");

                // *** 3. Nacin pozivanja ***
                // *** Vracanje obicnog Task-a ***
                // - Poziva Metodu asinhrono unutar zasebne niti ThreadPool-a
                // - Mozemo da sacekamo kraj izvrsavanja
                // - Ne mozemo da preuzmemo rezultat

                Task tNoRetVal = Task.Run(async () => await Metoda());

                Console.WriteLine("Called Metoda, and will wait for it, but can't retrieve result");

                await tNoRetVal;

                Console.WriteLine($"Metoda is done, but we got no result");

                Console.WriteLine("-----------------------------------------");

                // *** 4. Nacin pozivanja ***
                // *** await bez povratne vrednosti ***
                // - Poziva Metodu asinhrono unutar zasebne niti ThreadPool-a
                // - Moramo da cekamo na njeno izvrsavanje pre prelaska na narednu liniju
                // - Ne mozemo da preuzmemo rezultat

                await Task.Run(async () => await Metoda() );

                Console.WriteLine("Called Metoda a while ago, and it is already done");

                Console.WriteLine("-----------------------------------------");

                // *** 5. Nacin pozivanja ***
                // *** Bez povratne vrednosti i Task-a ***
                // - Poziva Metodu asinhrono unutar zasebne niti ThreadPool-a
                // - Ne mozemo da sacekamo kraj izvrsavanja
                // - Ne mozemo da preuzmemo rezultat

                Task.Run(async () => await Metoda());

                Console.WriteLine("Called Metoda, but can't do anything about it");

                Console.WriteLine("Waiting for 5s to be sure it is done");

                Thread.Sleep(5000);

                Console.WriteLine("Done waiting");

                Console.WriteLine("-----------------------------------------");
            }).Wait();

            // Pozivanje asinhronih metoda preko Task.Run() metode bez await-a Metode unutar lambde
            // Rezultati su isti kao i u prethodnom delu
            // Komanda Metoda unutar lambde formira Task<string> vrednost 
            // S obzirom da je to jedina komanda unutar lambde i da se ne koriste {} to je i povratna vrednost lambde
            // Ova Task<string> vrednost se izbacuje kao povratna vrednost Task.Run() metode
            Task.Run(async () =>
            {
                Console.WriteLine("CALLING ASYNC METHODS WITH Task.Run() BUT WITHOUT AWAIT");

                Console.WriteLine("-----------------------------------------");

                // *** 1. Nacin pozivanja ***
                // *** await sa povratnom vrednoscu ***
                // - Poziva Metodu asinhrono unutar zasebne niti ThreadPool-a
                // - Moramo da cekamo na njeno izvrsavanje pre prelaska na narednu liniju
                // - Preuzimamo rezultat cim se Metoda zavrsi

                string res1 = await Task.Run(() => Metoda());

                Console.WriteLine("Called Metoda a while ago, and it is already done");

                Console.WriteLine($"Got {res1} from Metoda");

                Console.WriteLine("-----------------------------------------");

                // *** 2. Nacin pozivanja ***
                // *** Vracanje string Task-a ***
                // - Poziva Metodu asinhrono unutar zasebne niti ThreadPool-a
                // - Mozemo da radimo nesto dok cekamo na razultat
                // - Mozemo da preuzmemo rezultat gde god hocemo

                Task<string> t = Task.Run(() => Metoda());

                Console.WriteLine("Called Metoda and we're working while waiting for result");

                string res2 = await t;

                Console.WriteLine($"Got {res2} from Metoda");

                Console.WriteLine("-----------------------------------------");

                // *** 3. Nacin pozivanja ***
                // *** Vracanje obicnog Task-a ***
                // - Poziva Metodu asinhrono unutar zasebne niti ThreadPool-a
                // - Mozemo da sacekamo kraj izvrsavanja
                // - Ne mozemo da preuzmemo rezultat

                Task tNoRetVal = Task.Run(() => Metoda());

                Console.WriteLine("Called Metoda, and will wait for it, but can't retrieve result");

                await tNoRetVal;

                Console.WriteLine($"Metoda is done, but we got no result");

                Console.WriteLine("-----------------------------------------");

                // *** 4. Nacin pozivanja ***
                // *** await bez povratne vrednosti ***
                // - Poziva Metodu asinhrono unutar zasebne niti ThreadPool-a
                // - Moramo da cekamo na njeno izvrsavanje pre prelaska na narednu liniju
                // - Ne mozemo da preuzmemo rezultat

                await Task.Run(() => Metoda() );

                Console.WriteLine("Called Metoda a while ago, and it is already done");

                Console.WriteLine("-----------------------------------------");

                // *** 5. Nacin pozivanja ***
                // *** Bez povratne vrednosti i Task-a ***
                // - Poziva Metodu asinhrono unutar zasebne niti ThreadPool-a
                // - Ne mozemo da sacekamo kraj izvrsavanja
                // - Ne mozemo da preuzmemo rezultat

                Task.Run(() => Metoda());

                Console.WriteLine("Called Metoda, but can't do anything about it");

                Console.WriteLine("Waiting for 5s to be sure it is done");

                Thread.Sleep(5000);

                Console.WriteLine("Done waiting");

                Console.WriteLine("-----------------------------------------");
            }).Wait();

            // Pozivanje asinhronih metoda preko Task.Run() metode uz/bez await-a Metode unutar lambde
            // Lambda sada koristi {} sto pravi ogromnu razliku
            // Povratna vrednost iz Task.Run() metode je Task unutar kojeg se izvrsava nas kod
            // Da bi se vratio Task<string> mora da se koristi return (eksplicitno), sto bi dovelo do istih rezultata kao u prethodnom delu
            Task.Run(async () =>
            {
                Console.WriteLine("CALLING TWO ASYNC METHODS WITH Task.Run() AND BOTH WITH AND WITHOUT AWAIT");

                Console.WriteLine("-----------------------------------------");

                // *** 3. Nacin pozivanja ***
                // *** 1. Varijanta ***
                // *** Vracanje obicnog Task-a ***
                // - Poziva Metodu asinhrono unutar zasebne niti ThreadPool-a
                // - Mozemo da sacekamo kraj izvrsavanja Taska
                // - Task je izvrsen tek kada je izvrsena Metoda()
                // - Ne mozemo da preuzmemo rezultat

                Task tNoRetVal1 = Task.Run(async () => { await Metoda(); });

                Console.WriteLine("Called Metoda, and will wait for it, but can't retrieve result");

                await tNoRetVal1;

                Console.WriteLine($"Metoda is done, but we got no result");

                Console.WriteLine("-----------------------------------------");

                // *** 3. Nacin pozivanja ***
                // *** 2. Varijanta ***
                // *** Vracanje obicnog Task-a ***
                // - Poziva Metodu asinhrono unutar zasebne niti ThreadPool-a
                // - Mozemo da sacekamo kraj izvrsavanja Taska
                // - Task je izvrsen cim je pozvana Metoda()
                // - Ne mozemo da preuzmemo rezultat

                Task tNoRetVal2 = Task.Run(() => { Metoda(); });

                Console.WriteLine("Called Metoda, but can't wait for it or retrieve result");

                await tNoRetVal2; // S obzirom da nema await-a unutar lambde, ovaj Task je izvrsen cim je pozvana Metoda()

                Console.WriteLine($"Metoda is not done, but our Task is");

                Console.WriteLine("Waiting for 5s to be sure Metoda is done");

                Thread.Sleep(5000);

                Console.WriteLine("Done waiting");

                Console.WriteLine("-----------------------------------------");

                // *** 4. Nacin pozivanja ***
                // *** 1. Varijanta ***
                // *** await bez povratne vrednosti ***
                // - Poziva Metodu asinhrono unutar zasebne niti ThreadPool-a
                // - Moramo da cekamo na izvrsavanje Task-a pre prelaska na narednu liniju
                // - Task je izvrsen tek kada je izvrsena Metoda()
                // - Ne mozemo da preuzmemo rezultat

                await Task.Run(async () => { await Metoda(); });

                Console.WriteLine("Called Metoda a while ago, and it is already done");

                Console.WriteLine("-----------------------------------------");

                // *** 4. Nacin pozivanja ***
                // *** 2. Varijanta ***
                // *** await bez povratne vrednosti ***
                // - Poziva Metodu asinhrono unutar zasebne niti ThreadPool-a
                // - Moramo da cekamo na izvrsavanje Task-a pre prelaska na narednu liniju
                // - Task je izvrsen cim je pozvana Metoda()
                // - Ne mozemo da preuzmemo rezultat

                await Task.Run(() => { Metoda(); }); // Task je izvrsen cim je pozvana Metoda()

                Console.WriteLine("Just called Metoda, but Task is already done");

                Console.WriteLine("Waiting for 5s to be sure Metoda is done");

                Thread.Sleep(5000);

                Console.WriteLine("Done waiting");

                Console.WriteLine("-----------------------------------------");

                // *** 5. Nacin pozivanja ***
                // *** 1. Varijanta ***
                // *** Bez povratne vrednosti i Task-a ***
                // - Poziva Metodu asinhrono unutar zasebne niti ThreadPool-a
                // - Ne mozemo da sacekamo kraj izvrsavanja
                // - Ne mozemo da preuzmemo rezultat

                Task.Run(async () => { await Metoda(); });

                Console.WriteLine("Called Metoda, but can't do anything about it");

                Console.WriteLine("Waiting for 5s to be sure it is done");

                Thread.Sleep(5000);

                Console.WriteLine("Done waiting");

                Console.WriteLine("-----------------------------------------");

                // *** 5. Nacin pozivanja ***
                // *** 2. Varijanta ***
                // *** Bez povratne vrednosti i Task-a ***
                // - Poziva Metodu asinhrono unutar zasebne niti ThreadPool-a
                // - Ne mozemo da sacekamo kraj izvrsavanja
                // - Ne mozemo da preuzmemo rezultat

                Task.Run(() => { Metoda(); });

                Console.WriteLine("Called Metoda, but can't do anything about it");

                Console.WriteLine("Waiting for 5s to be sure it is done");

                Thread.Sleep(5000);

                Console.WriteLine("Done waiting");

                Console.WriteLine("-----------------------------------------");
            }).Wait();

            // Pozivanje vise asinhronih metoda preko Task.Run() metode uz/bez await-a Metode unutar lambde
            // Lambda i dalje koristi {} (sada svakako mora zbog vise komandi)
            // Povratna vrednost iz Task.Run() metode je Task<string> jer eksplicitno koristimo return
            Task.Run(async () =>
            {
                Console.WriteLine("CALLING TWO ASYNC METHODS WITH Task.Run() AND BOTH WITH AND WITHOUT AWAIT");

                Console.WriteLine("-----------------------------------------");

                // *** 1. Nacin pozivanja ***
                // *** 1. Varijanta ***
                // *** await sa povratnom vrednoscu ***
                // - Poziva dve Metode asinhrono unutar zasebne niti ThreadPool-a
                // - Moramo da cekamo na izvrsavanje obe Metode pre prelaska na narednu liniju
                // - Preuzimamo rezultat cim se druga Metoda zavrsi

                string res11 = await Task.Run(async () => { await Metoda(); return await Metoda(); });

                Console.WriteLine("Called Metoda 2x a while ago, and it is already done");

                Console.WriteLine($"Got {res11} from second Metoda");

                Console.WriteLine("-----------------------------------------");

                // *** 1. Nacin pozivanja ***
                // *** 2. Varijanta ***
                // *** await sa povratnom vrednoscu ***
                // - Poziva dve Metode asinhrono unutar zasebne niti ThreadPool-a
                // - Moramo da cekamo samo na izvrsavanje druge Metode pre prelaska na narednu liniju
                // - Preuzimamo rezultat cim se druga Metoda zavrsi

                string res12 = await Task.Run(() => { Metoda(); return Metoda(); });

                Console.WriteLine("Called Metoda 2x a while ago, and it is already done");

                Console.WriteLine($"Got {res12} from second Metoda");

                Console.WriteLine("-----------------------------------------");

                // *** 2. Nacin pozivanja ***
                // *** 1. Varijanta ***
                // *** Vracanje string Task-a ***
                // - Poziva dve Metode asinhrono unutar zasebne niti ThreadPool-a
                // - Moramo da cekamo na izvrsavanje obe Metode pre dobijanja rezultata
                // - Mozemo da radimo nesto dok cekamo na razultat druge Metode
                // - Mozemo da preuzmemo rezultat gde god hocemo

                Task<string> t1 = Task.Run(async () => { await Metoda(); return await Metoda(); });

                Console.WriteLine("Called Metoda 2x and we're working while waiting for result");

                string res21 = await t1;

                Console.WriteLine($"Got {res21} from second Metoda");

                Console.WriteLine("-----------------------------------------");

                // *** 2. Nacin pozivanja ***
                // *** 2. Varijanta ***
                // *** Vracanje string Task-a ***
                // - Poziva dve Metode asinhrono unutar zasebne niti ThreadPool-a
                // - Moramo da cekamo samo na izvrsavanje druge Metode pre dobijanja rezultata
                // - Mozemo da radimo nesto dok cekamo na razultat druge Metode
                // - Mozemo da preuzmemo rezultat gde god hocemo

                Task<string> t2 = Task.Run(() => { Metoda(); return Metoda(); });

                Console.WriteLine("Called Metoda 2x and we're working while waiting for result");

                string res22 = await t2;

                Console.WriteLine($"Got {res22} from second Metoda");

                Console.WriteLine("-----------------------------------------");

                // *** 3. Nacin pozivanja ***
                // *** 1. Varijanta ***
                // *** Vracanje obicnog Task-a ***
                // - Poziva dve Metode asinhrono unutar zasebne niti ThreadPool-a
                // - Mozemo da sacekamo kraj izvrsavanja Taska
                // - Task je zavrsen kada se izvrse obe metode
                // - Ne mozemo da preuzmemo rezultat

                Task tNoRetVal1 = Task.Run(async () => { await Metoda(); return await Metoda(); });

                Console.WriteLine("Called Metoda 2x, and will wait for them, but can't retrieve result");

                await tNoRetVal1;

                Console.WriteLine($"Second Metoda is done, but we got no result");

                Console.WriteLine("-----------------------------------------");

                // *** 3. Nacin pozivanja ***
                // *** 2. Varijanta ***
                // *** Vracanje obicnog Task-a ***
                // - Poziva dve Metode asinhrono unutar zasebne niti ThreadPool-a
                // - Mozemo da sacekamo kraj izvrsavanja Taska
                // - Task je zavrsen kada se zavrsi druga metoda
                // - Ne mozemo da preuzmemo rezultat

                Task tNoRetVal2 = Task.Run(() => { Metoda(); return Metoda(); });

                Console.WriteLine("Called Metoda 2x, and will wait for them, but can't retrieve result");

                await tNoRetVal2;

                Console.WriteLine($"Second Metoda is done, but we got no result");

                Console.WriteLine("-----------------------------------------");

                // *** 4. Nacin pozivanja ***
                // *** 1. Varijanta ***
                // *** await bez povratne vrednosti ***
                // - Poziva dve Metode asinhrono unutar zasebne niti ThreadPool-a
                // - Moramo da cekamo na izvrsavanje obe Metode pre prelaska na narednu liniju
                // - Ne mozemo da preuzmemo rezultat

                await Task.Run(async () => { await Metoda(); return await Metoda(); });

                Console.WriteLine("Called Metoda 2x a while ago, and they are already done");

                Console.WriteLine("-----------------------------------------");

                // *** 4. Nacin pozivanja ***
                // *** 2. Varijanta ***
                // *** await bez povratne vrednosti ***
                // - Poziva dve Metode asinhrono unutar zasebne niti ThreadPool-a
                // - Moramo da cekamo samo na izvrsavanje druge Metode pre prelaska na narednu liniju
                // - Ne mozemo da preuzmemo rezultat

                await Task.Run(() => { Metoda(); return Metoda(); });

                Console.WriteLine("Called Metoda 2x a while ago, and they are already done");

                Console.WriteLine("-----------------------------------------");

                // *** 5. Nacin pozivanja ***
                // *** 1. Varijanta ***
                // *** Bez povratne vrednosti i Task-a ***
                // - Poziva dve Metode asinhrono unutar zasebne niti ThreadPool-a
                // - Ne mozemo da sacekamo kraj izvrsavanja
                // - Ne mozemo da preuzmemo rezultat

                Task.Run(async () => { await Metoda(); return await Metoda(); });

                Console.WriteLine("Called Metoda 2x, but can't do anything about it");

                Console.WriteLine("Waiting for 10s to be sure it is done");

                Thread.Sleep(10000);

                Console.WriteLine("Done waiting");

                Console.WriteLine("-----------------------------------------");

                // *** 5. Nacin pozivanja ***
                // *** 2. Varijanta ***
                // *** Bez povratne vrednosti i Task-a ***
                // - Poziva dve Metode asinhrono unutar zasebne niti ThreadPool-a
                // - Ne mozemo da sacekamo kraj izvrsavanja
                // - Ne mozemo da preuzmemo rezultat

                Task.Run(() => { Metoda(); return Metoda(); });

                Console.WriteLine("Called Metoda 2x, but can't do anything about it");

                Console.WriteLine("Waiting for 10s to be sure it is done");

                Thread.Sleep(10000);

                Console.WriteLine("Done waiting");

                Console.WriteLine("-----------------------------------------");
            }).Wait();

            Console.WriteLine("Press any key...");

            Console.ReadKey();
        }

        public static async Task<string> Metoda()
        {
            await Task.Delay(1000);

            Console.WriteLine("Metoda waited for 1s");

            await Task.Delay(2000);

            Console.WriteLine("Metoda waited for 2s") ;

            return "Result";
        }
    }
}
